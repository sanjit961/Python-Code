#Python Operators are used to perform operations on variables and values:
# 1) Arithmetic Operators
# 2) Assignment Operators
# 3) Comparison Operators
# 4) Logical Operators
# 5) Identity Operators
# 6) Membership Operators
# 7) Bitwise Operators

# Addition          : "+"       Eg; x + y
# Subtraction       : "-"       Eg; x - y
# Multiplication    : "*"       Eg; x * y
# Division          : "/"       Eg; x / y
# Modulus           : "%"       Eg; x % y
# Exponentiation    : "**"      Eg; x ** y
# Floor division    : "//"      Eg; x // y

# Python Assignment Operators:
 =      eg; x = 5           same as; x = 5
 +=     eg; x +=3           same as; x = x+3
 -=     eg; x -+= 3         same as; x = x-3
 *=     eg; x *= 3          same as; x = x*3
 /=     eg; x/= 3           same as; x = x/3
 %=     eg; x %= 3          same as; x = x % 3
 //=    eg; x //= 3         same as; x = x // 3
 **=    eg; x **= 3         same as; x = x ** 3
 &=     eg; x &= 3          same as; x = x & 3
 |=     eg; x |= 3          same as; x = x | 3
 ^=     eg; x ^= 3          same as; x = x^3
 >>=    eg; x >>= 3         same as; x = x >> 3
 <<=    eg; x <<= 3         same as; x = x << 3

#Python Comparison Operators:
--> Comparison Operators are used to compare two values.

#Operator           #Name                            #Example
  ==                Equal                            x == y
  !=                Not Equal                        x != y
  >                 Greater than                     x > y
  <                 less than                        x < y
  >=                Greater than or Equal to         x >= y
  <=                Less than or Equal to            x <= y

 #Python Logical Operators:
 --> Logical Operators are used to combine conditional statements:

#Operator                       Description                                     Example
  and             Returns True if both statements are true                   x < 5 and x < 10
  or              Returns True if one of the statements is true              x < 5 or x < 4
  not             Reverse the result, returns False if the result is true    not(x<5 and x < 10)

  #Python Identity Operators:
  --> Identity Operators are used to compare the objects, not if they are equal, but if they
      are actually the same object, with the same memory location:
#Operator                       #Description                                  #Example
  is              Returns True if both variables are the same object            x is y
  is not          Returns True if both variables are not the same object        x is not y

#Python Membership Operators:
  --> Membership Operators are used to test if a sequence in presented in an object:
  #Operator                     #Description                            #Example
    in                      Returns True if a sequence with               x in y
                            the specified value is presented
                                    in the object.  
    
    not in                  Returns True if a sequence with the            x not in y             
                            specified value is not present in 
                                   the object.                  

 #Python Bitwise Operator:
  --> Bitwise Operators are used to compare (Bianry) numbers.

  #Operator                 #Name                           #Description
    &                        AND                    Sets each bit to 1 if both bits are 1
    |                        OR                     Sets each bit to 1 if one of the two
                                                              bits is 1

    ^                        XOR                    sets each bit to 1 if only one of the two
                                                               bits is 1

    ~                        NOT                            Inverts all the bits

    <<                Zero fill left shift           shift left by pushing zeros in from the 
                                                         right and let the leftmost
                                                              bits fall off

    >>                 Signed right shift            shift right by pushing copies of the 
                                                        leftmost bit in from the left,
                                                     and let the rightmost bits fall off
                                                     
                                                                                                               

